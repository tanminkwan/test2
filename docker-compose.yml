version: '3.8'

services:
  # PostgreSQL Database for User Service
  user-service-db:
    image: postgres:15
    container_name: vehicle-game-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1q2w3e4r!!
      POSTGRES_DB: postgres
    volumes:
      - user_service_data:/var/lib/postgresql/data
      - ./services/user-service/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - vehicle-game-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: user-service
    container_name: vehicle-game-user-service
    depends_on:
      user-service-db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 3002
      DB_TYPE: postgres
      DB_HOST: user-service-db
      DB_PORT: 5432
      DB_NAME: vehicle_game
      DB_USER: app_user
      DB_PASS: app123!@#
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRY: 24h
      ALLOW_EXTERNAL_ACCESS: false
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vehicle-game-network

  # Game Service
  game-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: game-service
    container_name: vehicle-game-game-service
    depends_on:
      user-service:
        condition: service_healthy
    environment:
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      ALLOW_EXTERNAL_ACCESS: false
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vehicle-game-network

  # Nginx API Gateway
  nginx:
    image: nginx:alpine
    container_name: vehicle-game-nginx
    depends_on:
      user-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vehicle-game-network

networks:
  vehicle-game-network:
    driver: bridge

volumes:
  user_service_data: 