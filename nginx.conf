worker_processes  1;

events {
    worker_connections  1024;
}

http {
    # 경로 변수 정의
    map $host $project_root {
        default "C:/pypjt/test2";
    }
    
    map $host $nginx_root {
        default "C:/nginx";
    }

    # 서비스 주소 상수 정의
    map $host $game_service_host {
        default "127.0.0.1:3001";
    }
    
    map $host $user_service_host {
        default "127.0.0.1:3002";
    }

    include       C:/nginx/conf/mime.types;
    default_type  application/octet-stream;

    # 로그 포맷 설정
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  C:/nginx/logs/access.log  main;
    error_log   C:/nginx/logs/error.log;

    sendfile        on;
    keepalive_timeout  65;

    # 업스트림 서버 정의
    upstream game_service {
        server 127.0.0.1:3001;  # Game Service 포트
    }

    upstream user_service {
        server 127.0.0.1:3002;  # User Service 포트 (인증 전용)
    }

    # 메인 서버 블록
    server {
        listen       80;
        server_name  localhost;

        # SPA 정적 파일 서빙
        location / {
            root   C:/pypjt/test2/client;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;  # SPA 라우팅 지원
        }

        # Socket.IO 스크립트 파일 (인증 없이 접근 가능) - 우선순위 높음
        location = /socket.io/socket.io.js {
            proxy_pass http://127.0.0.1:3001/socket.io/socket.io.js;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS 헤더
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        # WebSocket 프록시 설정 (Socket.IO) - 인증 제거, Game Service에서 처리
        location /socket.io/ {
            proxy_pass http://game_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Authorization 헤더 전달
            proxy_set_header Authorization $http_authorization;
            
            # CORS 헤더
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            
            # WebSocket 타임아웃 설정
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # 인증 관련 API (토큰 없이 접근 가능)
        location /api/auth/ {
            proxy_pass http://user_service/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # User Service에서 오는 CORS 헤더 제거
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # CORS 헤더 (OPTIONS가 아닌 요청용)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        # 토큰 검증을 위한 내부 인증 엔드포인트
        location = /auth {
            internal;
            proxy_pass http://user_service/api/users/verify-token;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

        # 게임 API (JWT 토큰 인증 필요)
        location /api/game/ {
            # 토큰 검증
            auth_request /auth;
            
            # 인증 실패 시 401 반환
            error_page 401 = @auth_error;
            
            # 인증 성공 시 게임 서비스로 프록시
            proxy_pass http://game_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            
            # 인증된 사용자 정보 헤더 추가 (User Service에서 반환)
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # CORS 헤더 (OPTIONS가 아닌 요청용)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        # 사용자 정보 API (JWT 토큰 인증 필요)
        location /api/user/ {
            # 토큰 검증
            auth_request /auth;
            
            # 인증 실패 시 401 반환
            error_page 401 = @auth_error;
            
            # 인증 성공 시 사용자 서비스로 프록시
            proxy_pass http://user_service/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            
            # User Service에서 오는 CORS 헤더 제거
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            
            # 인증된 사용자 정보 헤더 추가
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $username $upstream_http_x_username;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Username $username;
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # CORS 헤더 (OPTIONS가 아닌 요청용)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        }

        # 인증 오류 처리
        location @auth_error {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Content-Type' 'application/json' always;
            return 401 '{"error": "Unauthorized", "message": "Valid JWT token required"}';
        }

        # 헬스체크 엔드포인트
        location /health {
            access_log off;
            
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # CORS 헤더 (OPTIONS가 아닌 요청용)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header Content-Type text/plain;
            
            return 200 "healthy\n";
        }

        # 정적 파일 서빙 (SPA 에셋)
        location /static {
            alias html/static;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 에러 페이지
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # HTTPS 서버 (필요시 주석 해제)
    # server {
    #     listen       443 ssl;
    #     server_name  localhost;
    #
    #     ssl_certificate      cert.pem;
    #     ssl_certificate_key  cert.key;
    #
    #     ssl_session_cache    shared:SSL:1m;
    #     ssl_session_timeout  5m;
    #
    #     ssl_ciphers  HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers  on;
    #
    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #         try_files $uri $uri/ /index.html;
    #     }
    # }
} 